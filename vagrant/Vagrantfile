# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "bento/centos-6.7"
  config.vm.box_check_update = false

  # In case the vagrant-vbguest plugin is installed.
  config.vbguest && config.vbguest.auto_update = false

  # Share SSH locally by default
  config.vm.network :forwarded_port,
    guest: 22,
    host: ###SSH_PORT###,
    id: "ssh"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 7778, host: 7778
  config.vm.network "forwarded_port", guest: 8080, host: 8080

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "###SALT_DIR###/", "/srv/salt/", owner: "root", group: "root"
  config.vm.synced_folder "###UNHANGOUT_GIT_DIR###/", "/usr/local/node/unhangout-###UNHANGOUT_DOMAIN###/", owner: "root", group: "root"

  # This is a hack to load an SSH pubkey to the server if a valid one is found
  # on the host. Looks in the default location for RSA/DSA pubkeys.
  # NOTE: Should probably be rewritten as a vagrant plugin in the future.
  config.vm.provision "shell" do |s|
    ssh_dir = "#{Dir.home}/.ssh"
    ssh_pub_key_file = ""
    if File.readable?("#{ssh_dir}/id_rsa.pub") then
      ssh_pub_key_file = "#{ssh_dir}/id_rsa.pub"
    elsif File.readable?("#{ssh_dir}/id_dsa.pub") then
      ssh_pub_key_file = "#{ssh_dir}/id_dsa.pub"
    end
    if not ssh_pub_key_file.empty? then
      ssh_pub_key = File.readlines(ssh_pub_key_file).first.strip
      s.inline = <<-SHELL
        echo "Adding #{ssh_pub_key_file} to root and vagrant users authorized_keys file."
        echo "#{ssh_pub_key}" >> /home/vagrant/.ssh/authorized_keys
        sudo mkdir -p /root/.ssh
        sudo chown root:root /root/.ssh
        sudo chmod 700 /root/.ssh
        echo "#{ssh_pub_key}" | sudo tee -a /root/.ssh/authorized_keys
      SHELL
    else
      s.inline = <<-SHELL
        echo "No SSH pubkey found, for direct SSH access, one will need to be added to the VM."
      SHELL
    end
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provision :salt do |salt|
    salt.install_master = false
    salt.install_type = "git"
    salt.install_args = "v2015.8.3"
    salt.minion_config = "salt/minion"
    salt.log_level = "info"
    salt.verbose = true
    salt.run_highstate = true
  end

  # The Unhangout service cannot be started until the shared folders are
  # mounted, this executes on boot and after mounting.
  config.vm.provision :shell, run: "always" do |s|
    s.inline = "sudo service unhangout-###UNHANGOUT_DOMAIN### start"
  end

end
